// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace SourceNotes.Data
{
    public partial class SourceNotesContext : DbContext
    {
        public SourceNotesContext()
        {
        }

        public SourceNotesContext(DbContextOptions<SourceNotesContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<Comment> Comment { get; set; }
        public virtual DbSet<Keyword> Keyword { get; set; }
        public virtual DbSet<LbEntry> LbEntry { get; set; }
        public virtual DbSet<Methodology> Methodology { get; set; }
        public virtual DbSet<Note> Note { get; set; }
        public virtual DbSet<NotesToKeyword> NotesToKeyword { get; set; }
        public virtual DbSet<NotesToPerson> NotesToPerson { get; set; }
        public virtual DbSet<People> People { get; set; }
        public virtual DbSet<Project> Project { get; set; }
        public virtual DbSet<Sources> Sources { get; set; }
        public virtual DbSet<UsersToProjects> UsersToProjects { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AspNetUsers>(entity =>
            {
                entity.HasKey(e => e.Email)
                    .HasName("PK__AspNetUs__A9D10535234A5DD0");

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(450);

                entity.Property(e => e.NormalizedEmail).HasMaxLength(256);

                entity.Property(e => e.NormalizedUserName).HasMaxLength(256);

                entity.Property(e => e.UserName).HasMaxLength(256);
            });

            modelBuilder.Entity<Comment>(entity =>
            {
                entity.Property(e => e.CommentId).HasColumnName("Comment_ID");

                entity.Property(e => e.CommentDateTime)
                    .HasPrecision(0)
                    .HasColumnName("Comment_Date_Time")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CommentFromUser)
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnName("Comment_From_User");

                entity.Property(e => e.CommentNotesId).HasColumnName("Comment_Notes_ID");

                entity.Property(e => e.CommentText)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("Comment_Text");

                entity.Property(e => e.SsmaTimeStamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SSMA_TimeStamp");

                entity.HasOne(d => d.CommentFromUserNavigation)
                    .WithMany(p => p.Comment)
                    .HasForeignKey(d => d.CommentFromUser)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Comment__Comment__4D94879B");

                entity.HasOne(d => d.CommentNotes)
                    .WithMany(p => p.Comment)
                    .HasForeignKey(d => d.CommentNotesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Comment__Comment__4CA06362");
            });

            modelBuilder.Entity<Keyword>(entity =>
            {
                entity.Property(e => e.KeywordId).HasColumnName("Keyword_ID");

                entity.Property(e => e.KeywordName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Keyword_Name");
            });

            modelBuilder.Entity<LbEntry>(entity =>
            {
                entity.ToTable("LB_Entry");

                entity.Property(e => e.LbEntryId).HasColumnName("LB_Entry_ID");

                entity.Property(e => e.LabBookProjectId).HasColumnName("LabBook_Project_ID");

                entity.Property(e => e.LbEntryDateTime)
                    .HasPrecision(0)
                    .HasColumnName("LB_Entry_Date_Time")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LbEntryText)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("LB_Entry_Text");

                entity.Property(e => e.LbEntryUser)
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnName("LB_Entry_User");

                entity.Property(e => e.SsmaTimeStamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SSMA_TimeStamp");

                entity.HasOne(d => d.LabBookProject)
                    .WithMany(p => p.LbEntry)
                    .HasForeignKey(d => d.LabBookProjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__LB_Entry__LabBoo__48CFD27E");

                entity.HasOne(d => d.LbEntryUserNavigation)
                    .WithMany(p => p.LbEntry)
                    .HasForeignKey(d => d.LbEntryUser)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__LB_Entry__LB_Ent__46E78A0C");
            });

            modelBuilder.Entity<Methodology>(entity =>
            {
                entity.Property(e => e.MethodologyId).HasColumnName("Methodology_ID");

                entity.Property(e => e.MethodologyProjectId).HasColumnName("Methodology_Project_ID");

                entity.Property(e => e.MethodologyText)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("Methodology_Text")
                    .HasDefaultValueSql("('Create a document of best practices for your research project here.')");

                entity.Property(e => e.MethodologyUpdate)
                    .HasPrecision(0)
                    .HasColumnName("Methodology_Update")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SsmaTimeStamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SSMA_TimeStamp");

                entity.HasOne(d => d.MethodologyProject)
                    .WithMany(p => p.Methodology)
                    .HasForeignKey(d => d.MethodologyProjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Methodolo__Metho__52593CB8");
            });

            modelBuilder.Entity<Note>(entity =>
            {
                entity.Property(e => e.NoteId).HasColumnName("Note_ID");

                entity.Property(e => e.NoteDocDate)
                    .HasPrecision(0)
                    .HasColumnName("Note_Doc_Date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NoteProjectId).HasColumnName("Note_Project_ID");

                entity.Property(e => e.NoteSourceId).HasColumnName("Note_Source_ID");

                entity.Property(e => e.NoteText)
                    .IsRequired()
                    .HasColumnName("Note_Text");

                entity.Property(e => e.NoteUserAuthor)
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnName("Note_User_Author");

                entity.Property(e => e.SsmaTimeStamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SSMA_TimeStamp");

                entity.HasOne(d => d.NoteProject)
                    .WithMany(p => p.Note)
                    .HasForeignKey(d => d.NoteProjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Note__Note_Proje__36B12243");

                entity.HasOne(d => d.NoteSource)
                    .WithMany(p => p.Note)
                    .HasForeignKey(d => d.NoteSourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Note__Note_Sourc__37A5467C");

                entity.HasOne(d => d.NoteUserAuthorNavigation)
                    .WithMany(p => p.Note)
                    .HasForeignKey(d => d.NoteUserAuthor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Note__Note_User___38996AB5");
            });

            modelBuilder.Entity<NotesToKeyword>(entity =>
            {
                entity.Property(e => e.NotesToKeywordId).HasColumnName("Notes_To_Keyword_ID");

                entity.Property(e => e.KeywordId).HasColumnName("Keyword_ID");

                entity.Property(e => e.NotesId).HasColumnName("Notes_ID");

                entity.HasOne(d => d.Keyword)
                    .WithMany(p => p.NotesToKeyword)
                    .HasForeignKey(d => d.KeywordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__NotesToKe__Keywo__403A8C7D");

                entity.HasOne(d => d.Notes)
                    .WithMany(p => p.NotesToKeyword)
                    .HasForeignKey(d => d.NotesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__NotesToKe__Notes__3F466844");
            });

            modelBuilder.Entity<NotesToPerson>(entity =>
            {
                entity.Property(e => e.NotesToPersonId).HasColumnName("Notes_To_Person_ID");

                entity.Property(e => e.NotesId).HasColumnName("Notes_ID");

                entity.Property(e => e.PersonId).HasColumnName("Person_ID");

                entity.HasOne(d => d.Notes)
                    .WithMany(p => p.NotesToPerson)
                    .HasForeignKey(d => d.NotesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__NotesToPe__Notes__4316F928");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.NotesToPerson)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__NotesToPe__Perso__440B1D61");
            });

            modelBuilder.Entity<People>(entity =>
            {
                entity.Property(e => e.PeopleId).HasColumnName("People_ID");

                entity.Property(e => e.PeopleName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("People_Name");
            });

            modelBuilder.Entity<Project>(entity =>
            {
                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.ProjectDate)
                    .HasPrecision(0)
                    .HasColumnName("Project_Date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ProjectDescription).HasColumnName("Project_Description");

                entity.Property(e => e.ProjectName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Project_Name");

                entity.Property(e => e.ProjectPublic).HasColumnName("Project_Public");

                entity.Property(e => e.ProjectShortName)
                    .HasMaxLength(10)
                    .HasColumnName("Project_Short_Name");

                entity.Property(e => e.SsmaTimeStamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SSMA_TimeStamp");
            });

            modelBuilder.Entity<Sources>(entity =>
            {
                entity.HasKey(e => e.SourceSourceId)
                    .HasName("PK__Sources__7A14BB58973098D7");

                entity.Property(e => e.SourceSourceId).HasColumnName("Source_Source_ID");

                entity.Property(e => e.NoteTimeStamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("Note_TimeStamp");

                entity.Property(e => e.SourceTextDetails)
                    .IsRequired()
                    .HasColumnName("Source_Text_Details");
            });

            modelBuilder.Entity<UsersToProjects>(entity =>
            {
                entity.HasKey(e => e.UsersToProjectId)
                    .HasName("PK__UsersToP__95C3D4B738FEE54A");

                entity.Property(e => e.UsersToProjectId).HasColumnName("UsersToProject_ID");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.UserEmail)
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnName("User_Email");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.UsersToProjects)
                    .HasForeignKey(d => d.ProjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__UsersToPr__Proje__30F848ED");

                entity.HasOne(d => d.UserEmailNavigation)
                    .WithMany(p => p.UsersToProjects)
                    .HasForeignKey(d => d.UserEmail)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__UsersToPr__User___300424B4");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}