@page "/leaderboard"
﻿@using SourceNotes.Data
@inject AppState appState
@inject NavigationManager Navigation
@inherits OwningComponentBase<ProjectServices>
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@inject ProtectedSessionStorage ProtectedSessionStore;

<PageTitle>SourceNotes</PageTitle>

<head>
    <style>
        .trends-table th, .trends-table td {
            width: auto;
            white-space: nowrap;
        }
    </style>
</head>

<h3>Leaderboard</h3>
<br />

<p>Results as of @DateTime.Now: </p>

<table class="trends-table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Entries</th>
            <th>Words</th>
            <th>W/Rec</th>
            <th>KW Tagged</th>
            <th>Peo Tagged</th>
        </tr>
    </thead>

    <tbody>
        @foreach (var user in @users)
        {
            <tr>
                <td>@user.UserName</td>
                <td>@noteCount(user)</td>
                <td>@wordCount(user)</td>

                @if (noteCount(user) == 0)
                {
                    <td>0</td>
                }
                else
                {
                    <td>
                        @(Math.Round((wordCount(user) / @noteCount(user)), 2))
                    </td>
                }

                <td>
                    @keywordCount(user)
                </td>
                <td>@pplCount(user)</td>
            </tr>
        }
        <tr style="background-color: lightsteelblue; color:white">
            <td>Averages</td>
            <td>@avgNotes()</td>
            <td>@avgWords()</td>
            <td>-</td>
            <td>@avgKW()</td>
            <td>@avgppl()</td>
        </tr>
        <tr style="background-color: #80A0C1; color:white">
            <td>Totals</td>
            <td>@totalNotes()</td>
            <td> @totalWords()</td>
            <td>-</td>
            <td>@totalKW()</td>
            <td>@totalppl()</td>
        </tr>
    </tbody>
</table>

@code {
    List<AspNetUsers> users;
    List<Note> notes;
    List<Keyword> keywords;
    List<People> people;
    [CascadingParameter] Task<AuthenticationState> authenticationStateTask { get; set; }
    System.Security.Claims.ClaimsPrincipal user;
    int selectedProjectId;

    char[] delimiters = new char[] { ' ', '\r', '\n' };

    protected override async Task OnInitializedAsync()
    {
        users = Service.getUsers();
        notes = Service.getNotes(selectedProjectId);
        keywords = Service.getKeywords();
        var authState = await authenticationStateTask;
        user = authState.User;

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var result = await ProtectedSessionStore.GetAsync<int>(user.Identity.Name);
            selectedProjectId = result.Success ? result.Value : 0;
            notes = Service.getNotes(selectedProjectId);
            StateHasChanged();
        }
    }

    public double noteCount(AspNetUsers u)
    {
        return notes.Where(n => n.NoteUserAuthor == u.UserName).Count();
    }

    public double wordCount(AspNetUsers u)
    {
        double total = 0;
        foreach (var note in notes.Where(n => n.NoteUserAuthor == u.UserName))
        {
            total += note.NoteText.Split(delimiters, StringSplitOptions.RemoveEmptyEntries).Length;
        }
        return total;
    }

    public double keywordCount(AspNetUsers u)
    {
        double total = 0;
        foreach (var note in notes.Where(n => n.NoteUserAuthor == u.UserName))
        {
            total += Service.getKeywords(note).Count();
        }
        return total;
    }

    public double pplCount(AspNetUsers u)
    {
        double total = 0;
        foreach (var note in notes.Where(n => n.NoteUserAuthor == u.UserName))
        {
            total += Service.getPeople(note).Count();
        }
        return total;
    }

    public double totalNotes()
    {
        double total = 0;
        foreach (var user in users)
        {
            total += noteCount(user);
        }
        return total;
    }
    public double totalWords()
    {
        double total = 0;
        foreach (var user in users)
        {
            total += wordCount(user);
        }
        return total;
    }
    public double totalKW()
    {
        double total = 0;
        foreach (var user in users)
        {
            total += keywordCount(user);
        }
        return total;
    }
    public double totalppl()
    {
        double total = 0;
        foreach (var user in users)
        {
            total += pplCount(user);
        }
        return total;
    }

    public double avgNotes()
    {
        return Math.Round((totalNotes() / users.Count()), 2);
    }
    public double avgWords()
    {
        return Math.Round((totalWords() / users.Count()), 2);
    }
    public double avgKW()
    {
        return Math.Round((totalKW() / users.Count()), 2);
    }
    public double avgppl()
    {
        return Math.Round((totalppl() / users.Count()), 2);
    }

}


